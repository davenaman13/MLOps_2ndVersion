pipeline {
    agent any

    environment {
        VAULT_ADDR = 'http://127.0.0.1:8200'
        VAULT_TOKEN = credentials('vault-token')

        BACKEND_SERVICE = 'mental-health-backend-service'
        FRONTEND_SERVICE = 'mental-health-frontend-service'
        BACKEND_PORT = '5001'
        FRONTEND_PORT = '5003'
        K8S_NAMESPACE = 'default'
        ANSIBLE_PLAYBOOK_PATH = 'ansible/playbook.yml'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {
        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/davenaman13/MLOps_2ndVersion.git',
                    branch: 'main',
                    changelog: false,
                    poll: false
                )
            }
        }

        stage('Fetch Secrets & Docker Login') {
            steps {
                script {
                    def dockerUsername = sh(script: "vault kv get -field=username kv/mental-health/docker", returnStdout: true).trim()
                    def dockerPassword = sh(script: "vault kv get -field=password kv/mental-health/docker", returnStdout: true).trim()

                    if (!dockerUsername || !dockerPassword) {
                        error "Vault returned empty docker credentials!"
                    }

                    echo "Fetched DOCKER_USERNAME: ${dockerUsername}"
                    echo "Logging in to Docker..."

                    withEnv(["DOCKER_USERNAME=${dockerUsername}", "DOCKER_PASSWORD=${dockerPassword}"]) {
                        sh '''
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        '''
                    }

                    env.DOCKER_USERNAME = dockerUsername
                    env.DOCKER_PASSWORD = dockerPassword
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh """
                        docker build -t ${env.DOCKER_USERNAME}/${BACKEND_SERVICE}:${env.BUILD_ID} -f backend/Dockerfile backend/
                        docker build -t ${env.DOCKER_USERNAME}/${FRONTEND_SERVICE}:${env.BUILD_ID} -f frontend/Dockerfile frontend/
                    """
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    sh """
                        docker push ${env.DOCKER_USERNAME}/${BACKEND_SERVICE}:${env.BUILD_ID}
                        docker push ${env.DOCKER_USERNAME}/${FRONTEND_SERVICE}:${env.BUILD_ID}
                    """
                }
            }
        }

        stage('Debug Workspace') {
            steps {
                script {
                    echo "Current workspace: ${WORKSPACE}"
                    sh "ls -R ${WORKSPACE}"
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                script {
                    sh """
                        ansible-playbook -i ${WORKSPACE}/ansible/inventory.ini ${WORKSPACE}/ansible/playbook.yml
                    """
                }
            }
        }

        // stage('Install Metrics Server') {
        //     steps {
        //         script {
        //             echo "Installing metrics server..."
        //             sh '''
        //                 set -e
        //                 kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
        //                 echo "Waiting for metrics-server rollout..."
        //                 # Wait for rollout to complete with a timeout fallback
        //                 kubectl rollout status deployment metrics-server -n kube-system --timeout=120s || {
        //                     echo "Rollout timed out. Check 'kubectl describe deployment metrics-server -n kube-system' and pod logs for details.";
        //                     exit 1;
        //                 }
        //                 echo "Metrics Server installed successfully."
        //             '''
        //         }
        //     }
        // }

        stage('Verify HPA Status') {
            steps {
                script {
                    echo "Checking HPA metrics..."
                    sh '''
                        echo "Listing HPA objects:"
                        kubectl get hpa
                        echo "Pod Metrics:"
                        kubectl top pods || echo "Metrics might not be available yet"
                    '''
                }
            }
        }

        stage('Verify Backend Health') {
            steps {
                script {
                    sh """
                        echo "Starting port-forward for backend..."
                        nohup kubectl port-forward svc/${BACKEND_SERVICE} ${BACKEND_PORT}:${BACKEND_PORT} --namespace=${K8S_NAMESPACE} > /tmp/backend-portforward.log 2>&1 &
                        sleep 10
                        curl --retry 10 --retry-delay 5 http://localhost:${BACKEND_PORT}/health || exit 1
                    """
                }
            }
        }

        stage('Verify Frontend Availability') {
            steps {
                script {
                    sh """
                        echo "Starting port-forward for frontend..."
                        nohup kubectl port-forward svc/${FRONTEND_SERVICE} ${FRONTEND_PORT}:${FRONTEND_PORT} --namespace=${K8S_NAMESPACE} > /tmp/frontend-portforward.log 2>&1 &
                        sleep 10
                        curl --retry 10 --retry-delay 5 http://localhost:${FRONTEND_PORT} || exit 1
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up port-forwarding and workspace...'
            sh '''
                pkill -f "kubectl port-forward svc/${BACKEND_SERVICE}"
                pkill -f "kubectl port-forward svc/${FRONTEND_SERVICE}"
                docker logout || true
            '''
            cleanWs()
        }
        success {
            echo "Deployment Successful!"
        }
        failure {
            echo "Deployment Failed! Check Jenkins logs."
        }
    }
}
